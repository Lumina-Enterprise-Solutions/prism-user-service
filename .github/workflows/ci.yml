name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24' # Specify the Go version used in the project

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m --verbose

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.20', '1.21', '1.22','1.23','1.24'] # Test across multiple Go versions
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        env:
          REDIS_PASSWORD: redis123
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli -a redis123 ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Run unit tests
        env:
          TEST_DATABASE_HOST: localhost
          TEST_DATABASE_PORT: 5433
          TEST_DATABASE_USER: test_user
          TEST_DATABASE_PASSWORD: test_password
          TEST_DATABASE_NAME: test_db
          TEST_REDIS_HOST: localhost
          TEST_REDIS_PORT: 6380
          TEST_REDIS_PASSWORD: redis123
        run: go test -v -coverprofile=coverage.out ./internal/...

      - name: Run integration tests
        env:
          TEST_DATABASE_HOST: localhost
          TEST_DATABASE_PORT: 5433
          TEST_DATABASE_USER: test_user
          TEST_DATABASE_PASSWORD: test_password
          TEST_DATABASE_NAME: test_db
          TEST_REDIS_HOST: localhost
          TEST_REDIS_PORT: 6380
          TEST_REDIS_PASSWORD: redis123
        run: go test -v -tags=integration ./internal/...

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.go-version }}
          path: coverage.html
          retention-days: 7

  build:
    name: Build Binary
    runs-on: ubuntu-latest
    needs: [lint, test] # Run after lint and test jobs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Build binary
        run: go build -o prism-user-service ./cmd/server

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: prism-user-service-binary
          path: prism-user-service
          retention-days: 7

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build] # Run after build job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: false
          tags: prism-user-service:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
